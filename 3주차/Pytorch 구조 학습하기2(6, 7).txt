○ 모델 불러오기

강의 소개
- Pytorch 모델 저장 및 불러오기
state_dict의 의미와 모델의 파라미터를 여러 정보들과 함께 저장하고 불러오는 법
- 이어 학습하기(Transfer Learning)
전에 학습되어 있는 모델을 활용하는 법



강의 영상

model.save()
- 학습의 결과를 저장하기 위한 함수
- 모델 형태와 파라메터를 저장
→ 모델 학습 중간 과정의 저장을 통해 최선의 결과모델을 선택
→ 만들어진 모델을 외부 연구자와 공유하여 학습 재연성 향상

→ 파라메터만 저장 : torch.save(model.state_dict(), os.path.join(MODEL_PATH, "model.pt"))
* state_dict : 모델의 파라메터를 표시
(같은 모델의 형태에서 파라메터만 load하면 된다.)

→ 모델의 architecture와 함께저장 : torch.save(model, os.path.join(MODEL_PATH, "model.pt"))
   
→ 모델 불러오기 : model = torch.load(os.path.join(MODEL_PATH, "model.pt"))

checkpoints
- 학습의 중간 결과를 저장하여 최선의 결과


(pretrained model) Transfer learning
- 다른 데이터 셋으로 만든 모델을 현재 데이터에 적용
- NLP는 HuggingFace가 사실상 표준


Freezing
- pretrained model을 활용시 모델의 일부분을 frozen 시킴
→ 특정 layer의 학습을 중단시키고 나머지 layer를 학습시키는 방법


○ Monitoring tools for Pytorch

강의 소개
- Tensorboard와 weight&biases에 대해 학습
→ 파라미터와 Metric들을 자동으로 저장하는 실험 관리 프로세스 제공
→ 코드 버저닝, 협업 관리, MLOps의 전체적인 흐름 확인 가능


강의 영상


Tensorboard
- TensorFlow의 프로젝트로 만들어진 시각화 도구
- 학습 그래프, metric, 학습 결과의 시각화 지원
- Pytorch도 연결 가능

→ scalar : metric 등 상수 값의 연속(epoch)을 표시
→ gragh : 모델의 computational gragh 표시
→ histogram : weight 등 값의 분포를 표현
→ Image : 예측값과 실제값을 비교표시
→ mesh : 3d 형태의 데이터를 표현하는 도구



Weight & biases (wandb)
- 머신러닝 실험을 원활히 지원하기 위한 상용도구
- 협업, code versioning, 실험 결과 기록 등 제공
- MLOps의 대표적인 툴로 저변 확대 중

